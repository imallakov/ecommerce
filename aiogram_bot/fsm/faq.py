from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message

from database.requests import get_all_answered_questions, create_new_question
from keyboards.callbackdata import FAQData
from keyboards.inline_keyboards import faq_keyboard, to_main_menu_keyboard

faq_fsm_router = Router()


class FSMqa(StatesGroup):
    ask_question = State()


@faq_fsm_router.callback_query(FAQData.filter(F.event == 'to_faq'))
async def to_answered_questions(query: CallbackQuery, callback_data: FAQData):
    answered_question = await get_all_answered_questions()
    index = callback_data.index
    if len(answered_question) > 0:
        if callback_data.from_menu:
            await query.answer(text='–°–Ω–∞—á–∞–ª–∞ –≤–∑–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, '
                                    '–º–æ–∂–µ—Ç –Ω–∞–π–¥–µ—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Åüòâ',
                               show_alert=True)
        question = answered_question[index - 1]
        text = (f'–í–æ–ø—Ä–æ—Å:\n{question.question}\n\n'
                f'–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞:\n{question.answer}\n')
        if index >= len(answered_question):
            text += ('\n–ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. –ó–∞–¥–∞–π—Ç–µ –ø–∂ –µ–≥–æ –Ω–∏–∂–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –æ—Ç–≤–µ—Ç—è—Ç '
                     '–Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å!')
    else:
        await query.answer()
        text = '–û—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –µ—â–µ –Ω–µ—Ç! –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –æ—Ç–≤–µ—Ç—è—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å!'
    await query.message.edit_text(text=text, reply_markup=await faq_keyboard(index=index,
                                                                             count_of_questions=len(answered_question)))


@faq_fsm_router.callback_query(FAQData.filter(F.event == 'own_ques'))
async def ask_own_question(query: CallbackQuery, callback_data: FAQData, state: FSMContext):
    await query.answer()
    sent_message = await query.message.edit_text(text='–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å —á—Ç–æ –≤—ã –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.\n'
                                                      '–ó–∞–¥–∞–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –Ω–∏–∂–µ‚¨áÔ∏è\n'
                                                      '–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å üòâ',
                                                 reply_markup=await to_main_menu_keyboard(text='–û—Ç–º–µ–Ω–∏—Ç—å'))
    await state.set_state(FSMqa.ask_question)
    await state.update_data(message_id=sent_message.message_id)


@faq_fsm_router.message(StateFilter(FSMqa.ask_question))
async def save_users_question(message: Message, state: FSMContext):
    data = await state.get_data()
    message_id = data['message_id']
    await message.delete()
    result = await create_new_question(text=message.text)
    if result:
        await message.bot.edit_message_text(chat_id=message.chat.id,
                                            message_id=message_id,
                                            text='–ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã –Ω–∞ '
                                                 '–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏–º, –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è —Å—Ä–µ–¥–∏ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤',
                                            reply_markup=await to_main_menu_keyboard(text='–û—Ç–ª–∏—á–Ω–æüëçüèª'))
    else:
        await message.bot.edit_message_text(chat_id=message.chat.id,
                                            message_id=message_id,
                                            text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞!‚ùå\n'
                                                 '–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –Ω–∏–º!üßëüèª‚Äçüíª',
                                            reply_markup=await to_main_menu_keyboard(text='–•–æ—Ä–æ—à–æ'))
    await state.clear()
    await state.update_data({})
